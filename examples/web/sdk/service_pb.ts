// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file service.proto (package object_api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
    BinaryReadOptions,
    FieldList,
    JsonReadOptions,
    JsonValue,
    PartialMessage,
    PlainMessage
} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * @generated from message object_api.Object
 */
export class Object$ extends Message<Object$> {
    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "object_api.Object";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */},
        {no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {
            no: 3,
            name: "properties",
            kind: "map",
            K: 9 /* ScalarType.STRING */,
            V: {kind: "scalar", T: 9 /* ScalarType.STRING */}
        },
    ]);
    /**
     * @generated from field: uint64 id = 1;
     */
    id = protoInt64.zero;
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: map<string, string> properties = 3;
     */
    properties: { [key: string]: string } = {};

    constructor(data?: PartialMessage<Object$>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$ {
        return new Object$().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$ {
        return new Object$().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$ {
        return new Object$().fromJsonString(jsonString, options);
    }

    static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean {
        return proto3.util.equals(Object$, a, b);
    }
}

/**
 * @generated from message object_api.ObjectList
 */
export class ObjectList extends Message<ObjectList> {
    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "object_api.ObjectList";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "objects", kind: "message", T: Object$, repeated: true},
    ]);
    /**
     * @generated from field: repeated object_api.Object objects = 1;
     */
    objects: Object$[] = [];

    constructor(data?: PartialMessage<ObjectList>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectList {
        return new ObjectList().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectList {
        return new ObjectList().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectList {
        return new ObjectList().fromJsonString(jsonString, options);
    }

    static equals(a: ObjectList | PlainMessage<ObjectList> | undefined, b: ObjectList | PlainMessage<ObjectList> | undefined): boolean {
        return proto3.util.equals(ObjectList, a, b);
    }
}

/**
 * @generated from message object_api.ObjectId
 */
export class ObjectId extends Message<ObjectId> {
    static readonly runtime: typeof proto3 = proto3;
    static readonly typeName = "object_api.ObjectId";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */},
    ]);
    /**
     * @generated from field: uint64 id = 1;
     */
    id = protoInt64.zero;

    constructor(data?: PartialMessage<ObjectId>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectId {
        return new ObjectId().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectId {
        return new ObjectId().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectId {
        return new ObjectId().fromJsonString(jsonString, options);
    }

    static equals(a: ObjectId | PlainMessage<ObjectId> | undefined, b: ObjectId | PlainMessage<ObjectId> | undefined): boolean {
        return proto3.util.equals(ObjectId, a, b);
    }
}

