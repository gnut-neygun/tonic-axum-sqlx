# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: openapiv3/OpenAPIv3.proto, openapiv3/annotations.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf


@dataclass(eq=False, repr=False)
class AdditionalPropertiesItem(betterproto.Message):
    schema_or_reference: "SchemaOrReference" = betterproto.message_field(
        1, group="oneof"
    )
    boolean: bool = betterproto.bool_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class Any(betterproto.Message):
    value: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(1)
    yaml: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AnyOrExpression(betterproto.Message):
    any: "Any" = betterproto.message_field(1, group="oneof")
    expression: "Expression" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class Callback(betterproto.Message):
    """
    A map of possible out-of band callbacks related to the parent operation.
    Each value in the map is a Path Item Object that describes a set of
    requests that may be initiated by the API provider and the expected
    responses. The key value used to identify the callback object is an
    expression, evaluated at runtime, that identifies a URL to use for the
    callback operation.
    """

    path: List["NamedPathItem"] = betterproto.message_field(1)
    specification_extension: List["NamedAny"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CallbackOrReference(betterproto.Message):
    callback: "Callback" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class CallbacksOrReferences(betterproto.Message):
    additional_properties: List["NamedCallbackOrReference"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class Components(betterproto.Message):
    """
    Holds a set of reusable objects for different aspects of the OAS. All
    objects defined within the components object will have no effect on the API
    unless they are explicitly referenced from properties outside the
    components object.
    """

    schemas: "SchemasOrReferences" = betterproto.message_field(1)
    responses: "ResponsesOrReferences" = betterproto.message_field(2)
    parameters: "ParametersOrReferences" = betterproto.message_field(3)
    examples: "ExamplesOrReferences" = betterproto.message_field(4)
    request_bodies: "RequestBodiesOrReferences" = betterproto.message_field(5)
    headers: "HeadersOrReferences" = betterproto.message_field(6)
    security_schemes: "SecuritySchemesOrReferences" = betterproto.message_field(7)
    links: "LinksOrReferences" = betterproto.message_field(8)
    callbacks: "CallbacksOrReferences" = betterproto.message_field(9)
    specification_extension: List["NamedAny"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class Contact(betterproto.Message):
    """Contact information for the exposed API."""

    name: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)
    email: str = betterproto.string_field(3)
    specification_extension: List["NamedAny"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DefaultType(betterproto.Message):
    number: float = betterproto.double_field(1, group="oneof")
    boolean: bool = betterproto.bool_field(2, group="oneof")
    string: str = betterproto.string_field(3, group="oneof")


@dataclass(eq=False, repr=False)
class Discriminator(betterproto.Message):
    """
    When request bodies or response payloads may be one of a number of
    different schemas, a `discriminator` object can be used to aid in
    serialization, deserialization, and validation.  The discriminator is a
    specific object in a schema which is used to inform the consumer of the
    specification of an alternative schema based on the value associated with
    it.  When using the discriminator, _inline_ schemas will not be considered.
    """

    property_name: str = betterproto.string_field(1)
    mapping: "Strings" = betterproto.message_field(2)
    specification_extension: List["NamedAny"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Document(betterproto.Message):
    openapi: str = betterproto.string_field(1)
    info: "Info" = betterproto.message_field(2)
    servers: List["Server"] = betterproto.message_field(3)
    paths: "Paths" = betterproto.message_field(4)
    components: "Components" = betterproto.message_field(5)
    security: List["SecurityRequirement"] = betterproto.message_field(6)
    tags: List["Tag"] = betterproto.message_field(7)
    external_docs: "ExternalDocs" = betterproto.message_field(8)
    specification_extension: List["NamedAny"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class Encoding(betterproto.Message):
    """A single encoding definition applied to a single schema property."""

    content_type: str = betterproto.string_field(1)
    headers: "HeadersOrReferences" = betterproto.message_field(2)
    style: str = betterproto.string_field(3)
    explode: bool = betterproto.bool_field(4)
    allow_reserved: bool = betterproto.bool_field(5)
    specification_extension: List["NamedAny"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class Encodings(betterproto.Message):
    additional_properties: List["NamedEncoding"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Example(betterproto.Message):
    summary: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    value: "Any" = betterproto.message_field(3)
    external_value: str = betterproto.string_field(4)
    specification_extension: List["NamedAny"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ExampleOrReference(betterproto.Message):
    example: "Example" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class ExamplesOrReferences(betterproto.Message):
    additional_properties: List["NamedExampleOrReference"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class Expression(betterproto.Message):
    additional_properties: List["NamedAny"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExternalDocs(betterproto.Message):
    """Allows referencing an external resource for extended documentation."""

    description: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)
    specification_extension: List["NamedAny"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Header(betterproto.Message):
    """
    The Header Object follows the structure of the Parameter Object with the
    following changes:  1. `name` MUST NOT be specified, it is given in the
    corresponding `headers` map. 1. `in` MUST NOT be specified, it is
    implicitly in `header`. 1. All traits that are affected by the location
    MUST be applicable to a location of `header` (for example, `style`).
    """

    description: str = betterproto.string_field(1)
    required: bool = betterproto.bool_field(2)
    deprecated: bool = betterproto.bool_field(3)
    allow_empty_value: bool = betterproto.bool_field(4)
    style: str = betterproto.string_field(5)
    explode: bool = betterproto.bool_field(6)
    allow_reserved: bool = betterproto.bool_field(7)
    schema: "SchemaOrReference" = betterproto.message_field(8)
    example: "Any" = betterproto.message_field(9)
    examples: "ExamplesOrReferences" = betterproto.message_field(10)
    content: "MediaTypes" = betterproto.message_field(11)
    specification_extension: List["NamedAny"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class HeaderOrReference(betterproto.Message):
    header: "Header" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class HeadersOrReferences(betterproto.Message):
    additional_properties: List["NamedHeaderOrReference"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Info(betterproto.Message):
    """
    The object provides metadata about the API. The metadata MAY be used by the
    clients if needed, and MAY be presented in editing or documentation
    generation tools for convenience.
    """

    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    terms_of_service: str = betterproto.string_field(3)
    contact: "Contact" = betterproto.message_field(4)
    license: "License" = betterproto.message_field(5)
    version: str = betterproto.string_field(6)
    specification_extension: List["NamedAny"] = betterproto.message_field(7)
    summary: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class ItemsItem(betterproto.Message):
    schema_or_reference: List["SchemaOrReference"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class License(betterproto.Message):
    """License information for the exposed API."""

    name: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)
    specification_extension: List["NamedAny"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Link(betterproto.Message):
    """
    The `Link object` represents a possible design-time link for a response.
    The presence of a link does not guarantee the caller's ability to
    successfully invoke it, rather it provides a known relationship and
    traversal mechanism between responses and other operations.  Unlike
    _dynamic_ links (i.e. links provided **in** the response payload), the OAS
    linking mechanism does not require link information in the runtime
    response.  For computing links, and providing instructions to execute them,
    a runtime expression is used for accessing values in an operation and using
    them as parameters while invoking the linked operation.
    """

    operation_ref: str = betterproto.string_field(1)
    operation_id: str = betterproto.string_field(2)
    parameters: "AnyOrExpression" = betterproto.message_field(3)
    request_body: "AnyOrExpression" = betterproto.message_field(4)
    description: str = betterproto.string_field(5)
    server: "Server" = betterproto.message_field(6)
    specification_extension: List["NamedAny"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class LinkOrReference(betterproto.Message):
    link: "Link" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class LinksOrReferences(betterproto.Message):
    additional_properties: List["NamedLinkOrReference"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MediaType(betterproto.Message):
    """
    Each Media Type Object provides schema and examples for the media type
    identified by its key.
    """

    schema: "SchemaOrReference" = betterproto.message_field(1)
    example: "Any" = betterproto.message_field(2)
    examples: "ExamplesOrReferences" = betterproto.message_field(3)
    encoding: "Encodings" = betterproto.message_field(4)
    specification_extension: List["NamedAny"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MediaTypes(betterproto.Message):
    additional_properties: List["NamedMediaType"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NamedAny(betterproto.Message):
    """
    Automatically-generated message used to represent maps of Any as ordered
    (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "Any" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedCallbackOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of
    CallbackOrReference as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "CallbackOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedEncoding(betterproto.Message):
    """
    Automatically-generated message used to represent maps of Encoding as
    ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "Encoding" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedExampleOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of
    ExampleOrReference as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "ExampleOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedHeaderOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of HeaderOrReference
    as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "HeaderOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedLinkOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of LinkOrReference
    as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "LinkOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedMediaType(betterproto.Message):
    """
    Automatically-generated message used to represent maps of MediaType as
    ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "MediaType" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedParameterOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of
    ParameterOrReference as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "ParameterOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedPathItem(betterproto.Message):
    """
    Automatically-generated message used to represent maps of PathItem as
    ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "PathItem" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedRequestBodyOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of
    RequestBodyOrReference as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "RequestBodyOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedResponseOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of
    ResponseOrReference as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "ResponseOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedSchemaOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of SchemaOrReference
    as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "SchemaOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedSecuritySchemeOrReference(betterproto.Message):
    """
    Automatically-generated message used to represent maps of
    SecuritySchemeOrReference as ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "SecuritySchemeOrReference" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedServerVariable(betterproto.Message):
    """
    Automatically-generated message used to represent maps of ServerVariable as
    ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "ServerVariable" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedString(betterproto.Message):
    """
    Automatically-generated message used to represent maps of string as ordered
    (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: str = betterproto.string_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class NamedStringArray(betterproto.Message):
    """
    Automatically-generated message used to represent maps of StringArray as
    ordered (name,value) pairs.
    """

    name: str = betterproto.string_field(1)
    """Map key"""

    value: "StringArray" = betterproto.message_field(2)
    """Mapped value"""


@dataclass(eq=False, repr=False)
class OauthFlow(betterproto.Message):
    """Configuration details for a supported OAuth Flow"""

    authorization_url: str = betterproto.string_field(1)
    token_url: str = betterproto.string_field(2)
    refresh_url: str = betterproto.string_field(3)
    scopes: "Strings" = betterproto.message_field(4)
    specification_extension: List["NamedAny"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class OauthFlows(betterproto.Message):
    """Allows configuration of the supported OAuth Flows."""

    implicit: "OauthFlow" = betterproto.message_field(1)
    password: "OauthFlow" = betterproto.message_field(2)
    client_credentials: "OauthFlow" = betterproto.message_field(3)
    authorization_code: "OauthFlow" = betterproto.message_field(4)
    specification_extension: List["NamedAny"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class Object(betterproto.Message):
    additional_properties: List["NamedAny"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Operation(betterproto.Message):
    """Describes a single API operation on a path."""

    tags: List[str] = betterproto.string_field(1)
    summary: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    external_docs: "ExternalDocs" = betterproto.message_field(4)
    operation_id: str = betterproto.string_field(5)
    parameters: List["ParameterOrReference"] = betterproto.message_field(6)
    request_body: "RequestBodyOrReference" = betterproto.message_field(7)
    responses: "Responses" = betterproto.message_field(8)
    callbacks: "CallbacksOrReferences" = betterproto.message_field(9)
    deprecated: bool = betterproto.bool_field(10)
    security: List["SecurityRequirement"] = betterproto.message_field(11)
    servers: List["Server"] = betterproto.message_field(12)
    specification_extension: List["NamedAny"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class Parameter(betterproto.Message):
    """
    Describes a single operation parameter.  A unique parameter is defined by a
    combination of a name and location.
    """

    name: str = betterproto.string_field(1)
    in_: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    required: bool = betterproto.bool_field(4)
    deprecated: bool = betterproto.bool_field(5)
    allow_empty_value: bool = betterproto.bool_field(6)
    style: str = betterproto.string_field(7)
    explode: bool = betterproto.bool_field(8)
    allow_reserved: bool = betterproto.bool_field(9)
    schema: "SchemaOrReference" = betterproto.message_field(10)
    example: "Any" = betterproto.message_field(11)
    examples: "ExamplesOrReferences" = betterproto.message_field(12)
    content: "MediaTypes" = betterproto.message_field(13)
    specification_extension: List["NamedAny"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ParameterOrReference(betterproto.Message):
    parameter: "Parameter" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class ParametersOrReferences(betterproto.Message):
    additional_properties: List[
        "NamedParameterOrReference"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PathItem(betterproto.Message):
    """
    Describes the operations available on a single path. A Path Item MAY be
    empty, due to ACL constraints. The path itself is still exposed to the
    documentation viewer but they will not know which operations and parameters
    are available.
    """

    ref: str = betterproto.string_field(1)
    summary: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    get: "Operation" = betterproto.message_field(4)
    put: "Operation" = betterproto.message_field(5)
    post: "Operation" = betterproto.message_field(6)
    delete: "Operation" = betterproto.message_field(7)
    options: "Operation" = betterproto.message_field(8)
    head: "Operation" = betterproto.message_field(9)
    patch: "Operation" = betterproto.message_field(10)
    trace: "Operation" = betterproto.message_field(11)
    servers: List["Server"] = betterproto.message_field(12)
    parameters: List["ParameterOrReference"] = betterproto.message_field(13)
    specification_extension: List["NamedAny"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class Paths(betterproto.Message):
    """
    Holds the relative paths to the individual endpoints and their operations.
    The path is appended to the URL from the `Server Object` in order to
    construct the full URL.  The Paths MAY be empty, due to ACL constraints.
    """

    path: List["NamedPathItem"] = betterproto.message_field(1)
    specification_extension: List["NamedAny"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Properties(betterproto.Message):
    additional_properties: List["NamedSchemaOrReference"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Reference(betterproto.Message):
    """
    A simple object to allow referencing other components in the specification,
    internally and externally.  The Reference Object is defined by JSON
    Reference and follows the same structure, behavior and rules.   For this
    specification, reference resolution is accomplished as defined by the JSON
    Reference specification and not by the JSON Schema specification.
    """

    ref: str = betterproto.string_field(1)
    summary: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RequestBodiesOrReferences(betterproto.Message):
    additional_properties: List[
        "NamedRequestBodyOrReference"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RequestBody(betterproto.Message):
    """Describes a single request body."""

    description: str = betterproto.string_field(1)
    content: "MediaTypes" = betterproto.message_field(2)
    required: bool = betterproto.bool_field(3)
    specification_extension: List["NamedAny"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RequestBodyOrReference(betterproto.Message):
    request_body: "RequestBody" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class Response(betterproto.Message):
    """
    Describes a single response from an API Operation, including design-time,
    static  `links` to operations based on the response.
    """

    description: str = betterproto.string_field(1)
    headers: "HeadersOrReferences" = betterproto.message_field(2)
    content: "MediaTypes" = betterproto.message_field(3)
    links: "LinksOrReferences" = betterproto.message_field(4)
    specification_extension: List["NamedAny"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ResponseOrReference(betterproto.Message):
    response: "Response" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class Responses(betterproto.Message):
    """
    A container for the expected responses of an operation. The container maps
    a HTTP response code to the expected response.  The documentation is not
    necessarily expected to cover all possible HTTP response codes because they
    may not be known in advance. However, documentation is expected to cover a
    successful operation response and any known errors.  The `default` MAY be
    used as a default response object for all HTTP codes  that are not covered
    individually by the specification.  The `Responses Object` MUST contain at
    least one response code, and it  SHOULD be the response for a successful
    operation call.
    """

    default: "ResponseOrReference" = betterproto.message_field(1)
    response_or_reference: List["NamedResponseOrReference"] = betterproto.message_field(
        2
    )
    specification_extension: List["NamedAny"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResponsesOrReferences(betterproto.Message):
    additional_properties: List["NamedResponseOrReference"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class Schema(betterproto.Message):
    """
    The Schema Object allows the definition of input and output data types.
    These types can be objects, but also primitives and arrays. This object is
    an extended subset of the JSON Schema Specification Wright Draft 00.  For
    more information about the properties, see JSON Schema Core and JSON Schema
    Validation. Unless stated otherwise, the property definitions follow the
    JSON Schema.
    """

    nullable: bool = betterproto.bool_field(1)
    discriminator: "Discriminator" = betterproto.message_field(2)
    read_only: bool = betterproto.bool_field(3)
    write_only: bool = betterproto.bool_field(4)
    xml: "Xml" = betterproto.message_field(5)
    external_docs: "ExternalDocs" = betterproto.message_field(6)
    example: "Any" = betterproto.message_field(7)
    deprecated: bool = betterproto.bool_field(8)
    title: str = betterproto.string_field(9)
    multiple_of: float = betterproto.double_field(10)
    maximum: float = betterproto.double_field(11)
    exclusive_maximum: bool = betterproto.bool_field(12)
    minimum: float = betterproto.double_field(13)
    exclusive_minimum: bool = betterproto.bool_field(14)
    max_length: int = betterproto.int64_field(15)
    min_length: int = betterproto.int64_field(16)
    pattern: str = betterproto.string_field(17)
    max_items: int = betterproto.int64_field(18)
    min_items: int = betterproto.int64_field(19)
    unique_items: bool = betterproto.bool_field(20)
    max_properties: int = betterproto.int64_field(21)
    min_properties: int = betterproto.int64_field(22)
    required: List[str] = betterproto.string_field(23)
    enum: List["Any"] = betterproto.message_field(24)
    type: str = betterproto.string_field(25)
    all_of: List["SchemaOrReference"] = betterproto.message_field(26)
    one_of: List["SchemaOrReference"] = betterproto.message_field(27)
    any_of: List["SchemaOrReference"] = betterproto.message_field(28)
    not_: "Schema" = betterproto.message_field(29)
    items: "ItemsItem" = betterproto.message_field(30)
    properties: "Properties" = betterproto.message_field(31)
    additional_properties: "AdditionalPropertiesItem" = betterproto.message_field(32)
    default: "DefaultType" = betterproto.message_field(33)
    description: str = betterproto.string_field(34)
    format: str = betterproto.string_field(35)
    specification_extension: List["NamedAny"] = betterproto.message_field(36)


@dataclass(eq=False, repr=False)
class SchemaOrReference(betterproto.Message):
    schema: "Schema" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class SchemasOrReferences(betterproto.Message):
    additional_properties: List["NamedSchemaOrReference"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SecurityRequirement(betterproto.Message):
    """
    Lists the required security schemes to execute this operation. The name
    used for each property MUST correspond to a security scheme declared in the
    Security Schemes under the Components Object.  Security Requirement Objects
    that contain multiple schemes require that all schemes MUST be satisfied
    for a request to be authorized. This enables support for scenarios where
    multiple query parameters or HTTP headers are required to convey security
    information.  When a list of Security Requirement Objects is defined on the
    OpenAPI Object or Operation Object, only one of the Security Requirement
    Objects in the list needs to be satisfied to authorize the request.
    """

    additional_properties: List["NamedStringArray"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SecurityScheme(betterproto.Message):
    """
    Defines a security scheme that can be used by the operations. Supported
    schemes are HTTP authentication, an API key (either as a header, a cookie
    parameter or as a query parameter), mutual TLS (use of a client
    certificate), OAuth2's common flows (implicit, password, application and
    access code) as defined in RFC6749, and OpenID Connect.   Please note that
    currently (2019) the implicit flow is about to be deprecated OAuth 2.0
    Security Best Current Practice. Recommended for most use case is
    Authorization Code Grant flow with PKCE.
    """

    type: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    in_: str = betterproto.string_field(4)
    scheme: str = betterproto.string_field(5)
    bearer_format: str = betterproto.string_field(6)
    flows: "OauthFlows" = betterproto.message_field(7)
    open_id_connect_url: str = betterproto.string_field(8)
    specification_extension: List["NamedAny"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class SecuritySchemeOrReference(betterproto.Message):
    security_scheme: "SecurityScheme" = betterproto.message_field(1, group="oneof")
    reference: "Reference" = betterproto.message_field(2, group="oneof")


@dataclass(eq=False, repr=False)
class SecuritySchemesOrReferences(betterproto.Message):
    additional_properties: List[
        "NamedSecuritySchemeOrReference"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Server(betterproto.Message):
    """An object representing a Server."""

    url: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    variables: "ServerVariables" = betterproto.message_field(3)
    specification_extension: List["NamedAny"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ServerVariable(betterproto.Message):
    """
    An object representing a Server Variable for server URL template
    substitution.
    """

    enum: List[str] = betterproto.string_field(1)
    default: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    specification_extension: List["NamedAny"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ServerVariables(betterproto.Message):
    additional_properties: List["NamedServerVariable"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SpecificationExtension(betterproto.Message):
    """Any property starting with x- is valid."""

    number: float = betterproto.double_field(1, group="oneof")
    boolean: bool = betterproto.bool_field(2, group="oneof")
    string: str = betterproto.string_field(3, group="oneof")


@dataclass(eq=False, repr=False)
class StringArray(betterproto.Message):
    value: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Strings(betterproto.Message):
    additional_properties: List["NamedString"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Tag(betterproto.Message):
    """
    Adds metadata to a single tag that is used by the Operation Object. It is
    not mandatory to have a Tag Object per tag defined in the Operation Object
    instances.
    """

    name: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    external_docs: "ExternalDocs" = betterproto.message_field(3)
    specification_extension: List["NamedAny"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Xml(betterproto.Message):
    """
    A metadata object that allows for more fine-tuned XML model definitions.
    When using arrays, XML element names are *not* inferred (for
    singular/plural forms) and the `name` property SHOULD be used to add that
    information. See examples for expected behavior.
    """

    name: str = betterproto.string_field(1)
    namespace: str = betterproto.string_field(2)
    prefix: str = betterproto.string_field(3)
    attribute: bool = betterproto.bool_field(4)
    wrapped: bool = betterproto.bool_field(5)
    specification_extension: List["NamedAny"] = betterproto.message_field(6)
