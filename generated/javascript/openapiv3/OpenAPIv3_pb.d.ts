// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

// @generated by protoc-gen-es v1.2.0
// @generated from file openapiv3/OpenAPIv3.proto (package openapi.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any as Any$1, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message openapi.v3.AdditionalPropertiesItem
 */
export declare class AdditionalPropertiesItem extends Message<AdditionalPropertiesItem> {
  /**
   * @generated from oneof openapi.v3.AdditionalPropertiesItem.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.SchemaOrReference schema_or_reference = 1;
     */
    value: SchemaOrReference;
    case: "schemaOrReference";
  } | {
    /**
     * @generated from field: bool boolean = 2;
     */
    value: boolean;
    case: "boolean";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AdditionalPropertiesItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.AdditionalPropertiesItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdditionalPropertiesItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdditionalPropertiesItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdditionalPropertiesItem;

  static equals(a: AdditionalPropertiesItem | PlainMessage<AdditionalPropertiesItem> | undefined, b: AdditionalPropertiesItem | PlainMessage<AdditionalPropertiesItem> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Any
 */
export declare class Any extends Message<Any> {
  /**
   * @generated from field: google.protobuf.Any value = 1;
   */
  value?: Any$1;

  /**
   * @generated from field: string yaml = 2;
   */
  yaml: string;

  constructor(data?: PartialMessage<Any>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Any";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Any;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Any;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Any;

  static equals(a: Any | PlainMessage<Any> | undefined, b: Any | PlainMessage<Any> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.AnyOrExpression
 */
export declare class AnyOrExpression extends Message<AnyOrExpression> {
  /**
   * @generated from oneof openapi.v3.AnyOrExpression.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Any any = 1;
     */
    value: Any;
    case: "any";
  } | {
    /**
     * @generated from field: openapi.v3.Expression expression = 2;
     */
    value: Expression;
    case: "expression";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AnyOrExpression>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.AnyOrExpression";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyOrExpression;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyOrExpression;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyOrExpression;

  static equals(a: AnyOrExpression | PlainMessage<AnyOrExpression> | undefined, b: AnyOrExpression | PlainMessage<AnyOrExpression> | undefined): boolean;
}

/**
 * A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.
 *
 * @generated from message openapi.v3.Callback
 */
export declare class Callback extends Message<Callback> {
  /**
   * @generated from field: repeated openapi.v3.NamedPathItem path = 1;
   */
  path: NamedPathItem[];

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 2;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Callback>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Callback";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Callback;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Callback;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Callback;

  static equals(a: Callback | PlainMessage<Callback> | undefined, b: Callback | PlainMessage<Callback> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.CallbackOrReference
 */
export declare class CallbackOrReference extends Message<CallbackOrReference> {
  /**
   * @generated from oneof openapi.v3.CallbackOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Callback callback = 1;
     */
    value: Callback;
    case: "callback";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CallbackOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.CallbackOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallbackOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallbackOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallbackOrReference;

  static equals(a: CallbackOrReference | PlainMessage<CallbackOrReference> | undefined, b: CallbackOrReference | PlainMessage<CallbackOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.CallbacksOrReferences
 */
export declare class CallbacksOrReferences extends Message<CallbacksOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedCallbackOrReference additional_properties = 1;
   */
  additionalProperties: NamedCallbackOrReference[];

  constructor(data?: PartialMessage<CallbacksOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.CallbacksOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallbacksOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallbacksOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallbacksOrReferences;

  static equals(a: CallbacksOrReferences | PlainMessage<CallbacksOrReferences> | undefined, b: CallbacksOrReferences | PlainMessage<CallbacksOrReferences> | undefined): boolean;
}

/**
 * Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.
 *
 * @generated from message openapi.v3.Components
 */
export declare class Components extends Message<Components> {
  /**
   * @generated from field: openapi.v3.SchemasOrReferences schemas = 1;
   */
  schemas?: SchemasOrReferences;

  /**
   * @generated from field: openapi.v3.ResponsesOrReferences responses = 2;
   */
  responses?: ResponsesOrReferences;

  /**
   * @generated from field: openapi.v3.ParametersOrReferences parameters = 3;
   */
  parameters?: ParametersOrReferences;

  /**
   * @generated from field: openapi.v3.ExamplesOrReferences examples = 4;
   */
  examples?: ExamplesOrReferences;

  /**
   * @generated from field: openapi.v3.RequestBodiesOrReferences request_bodies = 5;
   */
  requestBodies?: RequestBodiesOrReferences;

  /**
   * @generated from field: openapi.v3.HeadersOrReferences headers = 6;
   */
  headers?: HeadersOrReferences;

  /**
   * @generated from field: openapi.v3.SecuritySchemesOrReferences security_schemes = 7;
   */
  securitySchemes?: SecuritySchemesOrReferences;

  /**
   * @generated from field: openapi.v3.LinksOrReferences links = 8;
   */
  links?: LinksOrReferences;

  /**
   * @generated from field: openapi.v3.CallbacksOrReferences callbacks = 9;
   */
  callbacks?: CallbacksOrReferences;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 10;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Components>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Components";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Components;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Components;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Components;

  static equals(a: Components | PlainMessage<Components> | undefined, b: Components | PlainMessage<Components> | undefined): boolean;
}

/**
 * Contact information for the exposed API.
 *
 * @generated from message openapi.v3.Contact
 */
export declare class Contact extends Message<Contact> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 4;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Contact>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Contact";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contact;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contact;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contact;

  static equals(a: Contact | PlainMessage<Contact> | undefined, b: Contact | PlainMessage<Contact> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.DefaultType
 */
export declare class DefaultType extends Message<DefaultType> {
  /**
   * @generated from oneof openapi.v3.DefaultType.oneof
   */
  oneof: {
    /**
     * @generated from field: double number = 1;
     */
    value: number;
    case: "number";
  } | {
    /**
     * @generated from field: bool boolean = 2;
     */
    value: boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: string string = 3;
     */
    value: string;
    case: "string";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<DefaultType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.DefaultType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DefaultType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DefaultType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DefaultType;

  static equals(a: DefaultType | PlainMessage<DefaultType> | undefined, b: DefaultType | PlainMessage<DefaultType> | undefined): boolean;
}

/**
 * When request bodies or response payloads may be one of a number of different schemas, a `discriminator` object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.  When using the discriminator, _inline_ schemas will not be considered.
 *
 * @generated from message openapi.v3.Discriminator
 */
export declare class Discriminator extends Message<Discriminator> {
  /**
   * @generated from field: string property_name = 1;
   */
  propertyName: string;

  /**
   * @generated from field: openapi.v3.Strings mapping = 2;
   */
  mapping?: Strings;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 3;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Discriminator>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Discriminator";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Discriminator;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Discriminator;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Discriminator;

  static equals(a: Discriminator | PlainMessage<Discriminator> | undefined, b: Discriminator | PlainMessage<Discriminator> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Document
 */
export declare class Document extends Message<Document> {
  /**
   * @generated from field: string openapi = 1;
   */
  openapi: string;

  /**
   * @generated from field: openapi.v3.Info info = 2;
   */
  info?: Info;

  /**
   * @generated from field: repeated openapi.v3.Server servers = 3;
   */
  servers: Server[];

  /**
   * @generated from field: openapi.v3.Paths paths = 4;
   */
  paths?: Paths;

  /**
   * @generated from field: openapi.v3.Components components = 5;
   */
  components?: Components;

  /**
   * @generated from field: repeated openapi.v3.SecurityRequirement security = 6;
   */
  security: SecurityRequirement[];

  /**
   * @generated from field: repeated openapi.v3.Tag tags = 7;
   */
  tags: Tag[];

  /**
   * @generated from field: openapi.v3.ExternalDocs external_docs = 8;
   */
  externalDocs?: ExternalDocs;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 9;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Document>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Document";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Document;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Document;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Document;

  static equals(a: Document | PlainMessage<Document> | undefined, b: Document | PlainMessage<Document> | undefined): boolean;
}

/**
 * A single encoding definition applied to a single schema property.
 *
 * @generated from message openapi.v3.Encoding
 */
export declare class Encoding extends Message<Encoding> {
  /**
   * @generated from field: string content_type = 1;
   */
  contentType: string;

  /**
   * @generated from field: openapi.v3.HeadersOrReferences headers = 2;
   */
  headers?: HeadersOrReferences;

  /**
   * @generated from field: string style = 3;
   */
  style: string;

  /**
   * @generated from field: bool explode = 4;
   */
  explode: boolean;

  /**
   * @generated from field: bool allow_reserved = 5;
   */
  allowReserved: boolean;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 6;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Encoding>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Encoding";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encoding;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encoding;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encoding;

  static equals(a: Encoding | PlainMessage<Encoding> | undefined, b: Encoding | PlainMessage<Encoding> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Encodings
 */
export declare class Encodings extends Message<Encodings> {
  /**
   * @generated from field: repeated openapi.v3.NamedEncoding additional_properties = 1;
   */
  additionalProperties: NamedEncoding[];

  constructor(data?: PartialMessage<Encodings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Encodings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encodings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encodings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encodings;

  static equals(a: Encodings | PlainMessage<Encodings> | undefined, b: Encodings | PlainMessage<Encodings> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Example
 */
export declare class Example extends Message<Example> {
  /**
   * @generated from field: string summary = 1;
   */
  summary: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.Any value = 3;
   */
  value?: Any;

  /**
   * @generated from field: string external_value = 4;
   */
  externalValue: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 5;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Example>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Example";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Example;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Example;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Example;

  static equals(a: Example | PlainMessage<Example> | undefined, b: Example | PlainMessage<Example> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ExampleOrReference
 */
export declare class ExampleOrReference extends Message<ExampleOrReference> {
  /**
   * @generated from oneof openapi.v3.ExampleOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Example example = 1;
     */
    value: Example;
    case: "example";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ExampleOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ExampleOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExampleOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExampleOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExampleOrReference;

  static equals(a: ExampleOrReference | PlainMessage<ExampleOrReference> | undefined, b: ExampleOrReference | PlainMessage<ExampleOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ExamplesOrReferences
 */
export declare class ExamplesOrReferences extends Message<ExamplesOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedExampleOrReference additional_properties = 1;
   */
  additionalProperties: NamedExampleOrReference[];

  constructor(data?: PartialMessage<ExamplesOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ExamplesOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExamplesOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExamplesOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExamplesOrReferences;

  static equals(a: ExamplesOrReferences | PlainMessage<ExamplesOrReferences> | undefined, b: ExamplesOrReferences | PlainMessage<ExamplesOrReferences> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Expression
 */
export declare class Expression extends Message<Expression> {
  /**
   * @generated from field: repeated openapi.v3.NamedAny additional_properties = 1;
   */
  additionalProperties: NamedAny[];

  constructor(data?: PartialMessage<Expression>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Expression";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Expression;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Expression;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Expression;

  static equals(a: Expression | PlainMessage<Expression> | undefined, b: Expression | PlainMessage<Expression> | undefined): boolean;
}

/**
 * Allows referencing an external resource for extended documentation.
 *
 * @generated from message openapi.v3.ExternalDocs
 */
export declare class ExternalDocs extends Message<ExternalDocs> {
  /**
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 3;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<ExternalDocs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ExternalDocs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalDocs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalDocs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalDocs;

  static equals(a: ExternalDocs | PlainMessage<ExternalDocs> | undefined, b: ExternalDocs | PlainMessage<ExternalDocs> | undefined): boolean;
}

/**
 * The Header Object follows the structure of the Parameter Object with the following changes:  1. `name` MUST NOT be specified, it is given in the corresponding `headers` map. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 *
 * @generated from message openapi.v3.Header
 */
export declare class Header extends Message<Header> {
  /**
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * @generated from field: bool required = 2;
   */
  required: boolean;

  /**
   * @generated from field: bool deprecated = 3;
   */
  deprecated: boolean;

  /**
   * @generated from field: bool allow_empty_value = 4;
   */
  allowEmptyValue: boolean;

  /**
   * @generated from field: string style = 5;
   */
  style: string;

  /**
   * @generated from field: bool explode = 6;
   */
  explode: boolean;

  /**
   * @generated from field: bool allow_reserved = 7;
   */
  allowReserved: boolean;

  /**
   * @generated from field: openapi.v3.SchemaOrReference schema = 8;
   */
  schema?: SchemaOrReference;

  /**
   * @generated from field: openapi.v3.Any example = 9;
   */
  example?: Any;

  /**
   * @generated from field: openapi.v3.ExamplesOrReferences examples = 10;
   */
  examples?: ExamplesOrReferences;

  /**
   * @generated from field: openapi.v3.MediaTypes content = 11;
   */
  content?: MediaTypes;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 12;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Header>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Header";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Header;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Header;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Header;

  static equals(a: Header | PlainMessage<Header> | undefined, b: Header | PlainMessage<Header> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.HeaderOrReference
 */
export declare class HeaderOrReference extends Message<HeaderOrReference> {
  /**
   * @generated from oneof openapi.v3.HeaderOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Header header = 1;
     */
    value: Header;
    case: "header";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<HeaderOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.HeaderOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderOrReference;

  static equals(a: HeaderOrReference | PlainMessage<HeaderOrReference> | undefined, b: HeaderOrReference | PlainMessage<HeaderOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.HeadersOrReferences
 */
export declare class HeadersOrReferences extends Message<HeadersOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedHeaderOrReference additional_properties = 1;
   */
  additionalProperties: NamedHeaderOrReference[];

  constructor(data?: PartialMessage<HeadersOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.HeadersOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeadersOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeadersOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeadersOrReferences;

  static equals(a: HeadersOrReferences | PlainMessage<HeadersOrReferences> | undefined, b: HeadersOrReferences | PlainMessage<HeadersOrReferences> | undefined): boolean;
}

/**
 * The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.
 *
 * @generated from message openapi.v3.Info
 */
export declare class Info extends Message<Info> {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: string terms_of_service = 3;
   */
  termsOfService: string;

  /**
   * @generated from field: openapi.v3.Contact contact = 4;
   */
  contact?: Contact;

  /**
   * @generated from field: openapi.v3.License license = 5;
   */
  license?: License;

  /**
   * @generated from field: string version = 6;
   */
  version: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 7;
   */
  specificationExtension: NamedAny[];

  /**
   * @generated from field: string summary = 8;
   */
  summary: string;

  constructor(data?: PartialMessage<Info>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Info";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info;

  static equals(a: Info | PlainMessage<Info> | undefined, b: Info | PlainMessage<Info> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ItemsItem
 */
export declare class ItemsItem extends Message<ItemsItem> {
  /**
   * @generated from field: repeated openapi.v3.SchemaOrReference schema_or_reference = 1;
   */
  schemaOrReference: SchemaOrReference[];

  constructor(data?: PartialMessage<ItemsItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ItemsItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemsItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemsItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemsItem;

  static equals(a: ItemsItem | PlainMessage<ItemsItem> | undefined, b: ItemsItem | PlainMessage<ItemsItem> | undefined): boolean;
}

/**
 * License information for the exposed API.
 *
 * @generated from message openapi.v3.License
 */
export declare class License extends Message<License> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 3;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<License>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.License";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): License;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): License;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): License;

  static equals(a: License | PlainMessage<License> | undefined, b: License | PlainMessage<License> | undefined): boolean;
}

/**
 * The `Link object` represents a possible design-time link for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.  Unlike _dynamic_ links (i.e. links provided **in** the response payload), the OAS linking mechanism does not require link information in the runtime response.  For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.
 *
 * @generated from message openapi.v3.Link
 */
export declare class Link extends Message<Link> {
  /**
   * @generated from field: string operation_ref = 1;
   */
  operationRef: string;

  /**
   * @generated from field: string operation_id = 2;
   */
  operationId: string;

  /**
   * @generated from field: openapi.v3.AnyOrExpression parameters = 3;
   */
  parameters?: AnyOrExpression;

  /**
   * @generated from field: openapi.v3.AnyOrExpression request_body = 4;
   */
  requestBody?: AnyOrExpression;

  /**
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.Server server = 6;
   */
  server?: Server;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 7;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Link>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Link";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Link;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Link;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Link;

  static equals(a: Link | PlainMessage<Link> | undefined, b: Link | PlainMessage<Link> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.LinkOrReference
 */
export declare class LinkOrReference extends Message<LinkOrReference> {
  /**
   * @generated from oneof openapi.v3.LinkOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Link link = 1;
     */
    value: Link;
    case: "link";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<LinkOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.LinkOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkOrReference;

  static equals(a: LinkOrReference | PlainMessage<LinkOrReference> | undefined, b: LinkOrReference | PlainMessage<LinkOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.LinksOrReferences
 */
export declare class LinksOrReferences extends Message<LinksOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedLinkOrReference additional_properties = 1;
   */
  additionalProperties: NamedLinkOrReference[];

  constructor(data?: PartialMessage<LinksOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.LinksOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinksOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinksOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinksOrReferences;

  static equals(a: LinksOrReferences | PlainMessage<LinksOrReferences> | undefined, b: LinksOrReferences | PlainMessage<LinksOrReferences> | undefined): boolean;
}

/**
 * Each Media Type Object provides schema and examples for the media type identified by its key.
 *
 * @generated from message openapi.v3.MediaType
 */
export declare class MediaType extends Message<MediaType> {
  /**
   * @generated from field: openapi.v3.SchemaOrReference schema = 1;
   */
  schema?: SchemaOrReference;

  /**
   * @generated from field: openapi.v3.Any example = 2;
   */
  example?: Any;

  /**
   * @generated from field: openapi.v3.ExamplesOrReferences examples = 3;
   */
  examples?: ExamplesOrReferences;

  /**
   * @generated from field: openapi.v3.Encodings encoding = 4;
   */
  encoding?: Encodings;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 5;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<MediaType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.MediaType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaType;

  static equals(a: MediaType | PlainMessage<MediaType> | undefined, b: MediaType | PlainMessage<MediaType> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.MediaTypes
 */
export declare class MediaTypes extends Message<MediaTypes> {
  /**
   * @generated from field: repeated openapi.v3.NamedMediaType additional_properties = 1;
   */
  additionalProperties: NamedMediaType[];

  constructor(data?: PartialMessage<MediaTypes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.MediaTypes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaTypes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaTypes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaTypes;

  static equals(a: MediaTypes | PlainMessage<MediaTypes> | undefined, b: MediaTypes | PlainMessage<MediaTypes> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of Any as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedAny
 */
export declare class NamedAny extends Message<NamedAny> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.Any value = 2;
   */
  value?: Any;

  constructor(data?: PartialMessage<NamedAny>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedAny";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedAny;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedAny;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedAny;

  static equals(a: NamedAny | PlainMessage<NamedAny> | undefined, b: NamedAny | PlainMessage<NamedAny> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of CallbackOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedCallbackOrReference
 */
export declare class NamedCallbackOrReference extends Message<NamedCallbackOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.CallbackOrReference value = 2;
   */
  value?: CallbackOrReference;

  constructor(data?: PartialMessage<NamedCallbackOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedCallbackOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedCallbackOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedCallbackOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedCallbackOrReference;

  static equals(a: NamedCallbackOrReference | PlainMessage<NamedCallbackOrReference> | undefined, b: NamedCallbackOrReference | PlainMessage<NamedCallbackOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of Encoding as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedEncoding
 */
export declare class NamedEncoding extends Message<NamedEncoding> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.Encoding value = 2;
   */
  value?: Encoding;

  constructor(data?: PartialMessage<NamedEncoding>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedEncoding";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedEncoding;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedEncoding;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedEncoding;

  static equals(a: NamedEncoding | PlainMessage<NamedEncoding> | undefined, b: NamedEncoding | PlainMessage<NamedEncoding> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of ExampleOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedExampleOrReference
 */
export declare class NamedExampleOrReference extends Message<NamedExampleOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.ExampleOrReference value = 2;
   */
  value?: ExampleOrReference;

  constructor(data?: PartialMessage<NamedExampleOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedExampleOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedExampleOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedExampleOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedExampleOrReference;

  static equals(a: NamedExampleOrReference | PlainMessage<NamedExampleOrReference> | undefined, b: NamedExampleOrReference | PlainMessage<NamedExampleOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of HeaderOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedHeaderOrReference
 */
export declare class NamedHeaderOrReference extends Message<NamedHeaderOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.HeaderOrReference value = 2;
   */
  value?: HeaderOrReference;

  constructor(data?: PartialMessage<NamedHeaderOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedHeaderOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedHeaderOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedHeaderOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedHeaderOrReference;

  static equals(a: NamedHeaderOrReference | PlainMessage<NamedHeaderOrReference> | undefined, b: NamedHeaderOrReference | PlainMessage<NamedHeaderOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of LinkOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedLinkOrReference
 */
export declare class NamedLinkOrReference extends Message<NamedLinkOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.LinkOrReference value = 2;
   */
  value?: LinkOrReference;

  constructor(data?: PartialMessage<NamedLinkOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedLinkOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedLinkOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedLinkOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedLinkOrReference;

  static equals(a: NamedLinkOrReference | PlainMessage<NamedLinkOrReference> | undefined, b: NamedLinkOrReference | PlainMessage<NamedLinkOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of MediaType as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedMediaType
 */
export declare class NamedMediaType extends Message<NamedMediaType> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.MediaType value = 2;
   */
  value?: MediaType;

  constructor(data?: PartialMessage<NamedMediaType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedMediaType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedMediaType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedMediaType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedMediaType;

  static equals(a: NamedMediaType | PlainMessage<NamedMediaType> | undefined, b: NamedMediaType | PlainMessage<NamedMediaType> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of ParameterOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedParameterOrReference
 */
export declare class NamedParameterOrReference extends Message<NamedParameterOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.ParameterOrReference value = 2;
   */
  value?: ParameterOrReference;

  constructor(data?: PartialMessage<NamedParameterOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedParameterOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedParameterOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedParameterOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedParameterOrReference;

  static equals(a: NamedParameterOrReference | PlainMessage<NamedParameterOrReference> | undefined, b: NamedParameterOrReference | PlainMessage<NamedParameterOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of PathItem as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedPathItem
 */
export declare class NamedPathItem extends Message<NamedPathItem> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.PathItem value = 2;
   */
  value?: PathItem;

  constructor(data?: PartialMessage<NamedPathItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedPathItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedPathItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedPathItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedPathItem;

  static equals(a: NamedPathItem | PlainMessage<NamedPathItem> | undefined, b: NamedPathItem | PlainMessage<NamedPathItem> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of RequestBodyOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedRequestBodyOrReference
 */
export declare class NamedRequestBodyOrReference extends Message<NamedRequestBodyOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.RequestBodyOrReference value = 2;
   */
  value?: RequestBodyOrReference;

  constructor(data?: PartialMessage<NamedRequestBodyOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedRequestBodyOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedRequestBodyOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedRequestBodyOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedRequestBodyOrReference;

  static equals(a: NamedRequestBodyOrReference | PlainMessage<NamedRequestBodyOrReference> | undefined, b: NamedRequestBodyOrReference | PlainMessage<NamedRequestBodyOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of ResponseOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedResponseOrReference
 */
export declare class NamedResponseOrReference extends Message<NamedResponseOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.ResponseOrReference value = 2;
   */
  value?: ResponseOrReference;

  constructor(data?: PartialMessage<NamedResponseOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedResponseOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedResponseOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedResponseOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedResponseOrReference;

  static equals(a: NamedResponseOrReference | PlainMessage<NamedResponseOrReference> | undefined, b: NamedResponseOrReference | PlainMessage<NamedResponseOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of SchemaOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedSchemaOrReference
 */
export declare class NamedSchemaOrReference extends Message<NamedSchemaOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.SchemaOrReference value = 2;
   */
  value?: SchemaOrReference;

  constructor(data?: PartialMessage<NamedSchemaOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedSchemaOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedSchemaOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedSchemaOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedSchemaOrReference;

  static equals(a: NamedSchemaOrReference | PlainMessage<NamedSchemaOrReference> | undefined, b: NamedSchemaOrReference | PlainMessage<NamedSchemaOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of SecuritySchemeOrReference as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedSecuritySchemeOrReference
 */
export declare class NamedSecuritySchemeOrReference extends Message<NamedSecuritySchemeOrReference> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.SecuritySchemeOrReference value = 2;
   */
  value?: SecuritySchemeOrReference;

  constructor(data?: PartialMessage<NamedSecuritySchemeOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedSecuritySchemeOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedSecuritySchemeOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedSecuritySchemeOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedSecuritySchemeOrReference;

  static equals(a: NamedSecuritySchemeOrReference | PlainMessage<NamedSecuritySchemeOrReference> | undefined, b: NamedSecuritySchemeOrReference | PlainMessage<NamedSecuritySchemeOrReference> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of ServerVariable as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedServerVariable
 */
export declare class NamedServerVariable extends Message<NamedServerVariable> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.ServerVariable value = 2;
   */
  value?: ServerVariable;

  constructor(data?: PartialMessage<NamedServerVariable>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedServerVariable";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedServerVariable;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedServerVariable;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedServerVariable;

  static equals(a: NamedServerVariable | PlainMessage<NamedServerVariable> | undefined, b: NamedServerVariable | PlainMessage<NamedServerVariable> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of string as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedString
 */
export declare class NamedString extends Message<NamedString> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<NamedString>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedString";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedString;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedString;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedString;

  static equals(a: NamedString | PlainMessage<NamedString> | undefined, b: NamedString | PlainMessage<NamedString> | undefined): boolean;
}

/**
 * Automatically-generated message used to represent maps of StringArray as ordered (name,value) pairs.
 *
 * @generated from message openapi.v3.NamedStringArray
 */
export declare class NamedStringArray extends Message<NamedStringArray> {
  /**
   * Map key
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Mapped value
   *
   * @generated from field: openapi.v3.StringArray value = 2;
   */
  value?: StringArray;

  constructor(data?: PartialMessage<NamedStringArray>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.NamedStringArray";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamedStringArray;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamedStringArray;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamedStringArray;

  static equals(a: NamedStringArray | PlainMessage<NamedStringArray> | undefined, b: NamedStringArray | PlainMessage<NamedStringArray> | undefined): boolean;
}

/**
 * Configuration details for a supported OAuth Flow
 *
 * @generated from message openapi.v3.OauthFlow
 */
export declare class OauthFlow extends Message<OauthFlow> {
  /**
   * @generated from field: string authorization_url = 1;
   */
  authorizationUrl: string;

  /**
   * @generated from field: string token_url = 2;
   */
  tokenUrl: string;

  /**
   * @generated from field: string refresh_url = 3;
   */
  refreshUrl: string;

  /**
   * @generated from field: openapi.v3.Strings scopes = 4;
   */
  scopes?: Strings;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 5;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<OauthFlow>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.OauthFlow";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OauthFlow;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OauthFlow;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OauthFlow;

  static equals(a: OauthFlow | PlainMessage<OauthFlow> | undefined, b: OauthFlow | PlainMessage<OauthFlow> | undefined): boolean;
}

/**
 * Allows configuration of the supported OAuth Flows.
 *
 * @generated from message openapi.v3.OauthFlows
 */
export declare class OauthFlows extends Message<OauthFlows> {
  /**
   * @generated from field: openapi.v3.OauthFlow implicit = 1;
   */
  implicit?: OauthFlow;

  /**
   * @generated from field: openapi.v3.OauthFlow password = 2;
   */
  password?: OauthFlow;

  /**
   * @generated from field: openapi.v3.OauthFlow client_credentials = 3;
   */
  clientCredentials?: OauthFlow;

  /**
   * @generated from field: openapi.v3.OauthFlow authorization_code = 4;
   */
  authorizationCode?: OauthFlow;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 5;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<OauthFlows>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.OauthFlows";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OauthFlows;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OauthFlows;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OauthFlows;

  static equals(a: OauthFlows | PlainMessage<OauthFlows> | undefined, b: OauthFlows | PlainMessage<OauthFlows> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Object
 */
export declare class Object$ extends Message<Object$> {
  /**
   * @generated from field: repeated openapi.v3.NamedAny additional_properties = 1;
   */
  additionalProperties: NamedAny[];

  constructor(data?: PartialMessage<Object$>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Object";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$;

  static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean;
}

/**
 * Describes a single API operation on a path.
 *
 * @generated from message openapi.v3.Operation
 */
export declare class Operation extends Message<Operation> {
  /**
   * @generated from field: repeated string tags = 1;
   */
  tags: string[];

  /**
   * @generated from field: string summary = 2;
   */
  summary: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.ExternalDocs external_docs = 4;
   */
  externalDocs?: ExternalDocs;

  /**
   * @generated from field: string operation_id = 5;
   */
  operationId: string;

  /**
   * @generated from field: repeated openapi.v3.ParameterOrReference parameters = 6;
   */
  parameters: ParameterOrReference[];

  /**
   * @generated from field: openapi.v3.RequestBodyOrReference request_body = 7;
   */
  requestBody?: RequestBodyOrReference;

  /**
   * @generated from field: openapi.v3.Responses responses = 8;
   */
  responses?: Responses;

  /**
   * @generated from field: openapi.v3.CallbacksOrReferences callbacks = 9;
   */
  callbacks?: CallbacksOrReferences;

  /**
   * @generated from field: bool deprecated = 10;
   */
  deprecated: boolean;

  /**
   * @generated from field: repeated openapi.v3.SecurityRequirement security = 11;
   */
  security: SecurityRequirement[];

  /**
   * @generated from field: repeated openapi.v3.Server servers = 12;
   */
  servers: Server[];

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 13;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Operation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Operation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Operation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Operation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Operation;

  static equals(a: Operation | PlainMessage<Operation> | undefined, b: Operation | PlainMessage<Operation> | undefined): boolean;
}

/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 *
 * @generated from message openapi.v3.Parameter
 */
export declare class Parameter extends Message<Parameter> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string in = 2;
   */
  in: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: bool required = 4;
   */
  required: boolean;

  /**
   * @generated from field: bool deprecated = 5;
   */
  deprecated: boolean;

  /**
   * @generated from field: bool allow_empty_value = 6;
   */
  allowEmptyValue: boolean;

  /**
   * @generated from field: string style = 7;
   */
  style: string;

  /**
   * @generated from field: bool explode = 8;
   */
  explode: boolean;

  /**
   * @generated from field: bool allow_reserved = 9;
   */
  allowReserved: boolean;

  /**
   * @generated from field: openapi.v3.SchemaOrReference schema = 10;
   */
  schema?: SchemaOrReference;

  /**
   * @generated from field: openapi.v3.Any example = 11;
   */
  example?: Any;

  /**
   * @generated from field: openapi.v3.ExamplesOrReferences examples = 12;
   */
  examples?: ExamplesOrReferences;

  /**
   * @generated from field: openapi.v3.MediaTypes content = 13;
   */
  content?: MediaTypes;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 14;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Parameter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Parameter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Parameter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Parameter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Parameter;

  static equals(a: Parameter | PlainMessage<Parameter> | undefined, b: Parameter | PlainMessage<Parameter> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ParameterOrReference
 */
export declare class ParameterOrReference extends Message<ParameterOrReference> {
  /**
   * @generated from oneof openapi.v3.ParameterOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Parameter parameter = 1;
     */
    value: Parameter;
    case: "parameter";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ParameterOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ParameterOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParameterOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParameterOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParameterOrReference;

  static equals(a: ParameterOrReference | PlainMessage<ParameterOrReference> | undefined, b: ParameterOrReference | PlainMessage<ParameterOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ParametersOrReferences
 */
export declare class ParametersOrReferences extends Message<ParametersOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedParameterOrReference additional_properties = 1;
   */
  additionalProperties: NamedParameterOrReference[];

  constructor(data?: PartialMessage<ParametersOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ParametersOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParametersOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParametersOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParametersOrReferences;

  static equals(a: ParametersOrReferences | PlainMessage<ParametersOrReferences> | undefined, b: ParametersOrReferences | PlainMessage<ParametersOrReferences> | undefined): boolean;
}

/**
 * Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.
 *
 * @generated from message openapi.v3.PathItem
 */
export declare class PathItem extends Message<PathItem> {
  /**
   * @generated from field: string _ref = 1;
   */
  Ref: string;

  /**
   * @generated from field: string summary = 2;
   */
  summary: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.Operation get = 4;
   */
  get?: Operation;

  /**
   * @generated from field: openapi.v3.Operation put = 5;
   */
  put?: Operation;

  /**
   * @generated from field: openapi.v3.Operation post = 6;
   */
  post?: Operation;

  /**
   * @generated from field: openapi.v3.Operation delete = 7;
   */
  delete?: Operation;

  /**
   * @generated from field: openapi.v3.Operation options = 8;
   */
  options?: Operation;

  /**
   * @generated from field: openapi.v3.Operation head = 9;
   */
  head?: Operation;

  /**
   * @generated from field: openapi.v3.Operation patch = 10;
   */
  patch?: Operation;

  /**
   * @generated from field: openapi.v3.Operation trace = 11;
   */
  trace?: Operation;

  /**
   * @generated from field: repeated openapi.v3.Server servers = 12;
   */
  servers: Server[];

  /**
   * @generated from field: repeated openapi.v3.ParameterOrReference parameters = 13;
   */
  parameters: ParameterOrReference[];

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 14;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<PathItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.PathItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathItem;

  static equals(a: PathItem | PlainMessage<PathItem> | undefined, b: PathItem | PlainMessage<PathItem> | undefined): boolean;
}

/**
 * Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL.  The Paths MAY be empty, due to ACL constraints.
 *
 * @generated from message openapi.v3.Paths
 */
export declare class Paths extends Message<Paths> {
  /**
   * @generated from field: repeated openapi.v3.NamedPathItem path = 1;
   */
  path: NamedPathItem[];

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 2;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Paths>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Paths";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Paths;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Paths;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Paths;

  static equals(a: Paths | PlainMessage<Paths> | undefined, b: Paths | PlainMessage<Paths> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Properties
 */
export declare class Properties extends Message<Properties> {
  /**
   * @generated from field: repeated openapi.v3.NamedSchemaOrReference additional_properties = 1;
   */
  additionalProperties: NamedSchemaOrReference[];

  constructor(data?: PartialMessage<Properties>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Properties";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Properties;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Properties;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Properties;

  static equals(a: Properties | PlainMessage<Properties> | undefined, b: Properties | PlainMessage<Properties> | undefined): boolean;
}

/**
 * A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.
 *
 * @generated from message openapi.v3.Reference
 */
export declare class Reference extends Message<Reference> {
  /**
   * @generated from field: string _ref = 1;
   */
  Ref: string;

  /**
   * @generated from field: string summary = 2;
   */
  summary: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  constructor(data?: PartialMessage<Reference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Reference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reference;

  static equals(a: Reference | PlainMessage<Reference> | undefined, b: Reference | PlainMessage<Reference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.RequestBodiesOrReferences
 */
export declare class RequestBodiesOrReferences extends Message<RequestBodiesOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedRequestBodyOrReference additional_properties = 1;
   */
  additionalProperties: NamedRequestBodyOrReference[];

  constructor(data?: PartialMessage<RequestBodiesOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.RequestBodiesOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestBodiesOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestBodiesOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestBodiesOrReferences;

  static equals(a: RequestBodiesOrReferences | PlainMessage<RequestBodiesOrReferences> | undefined, b: RequestBodiesOrReferences | PlainMessage<RequestBodiesOrReferences> | undefined): boolean;
}

/**
 * Describes a single request body.
 *
 * @generated from message openapi.v3.RequestBody
 */
export declare class RequestBody extends Message<RequestBody> {
  /**
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.MediaTypes content = 2;
   */
  content?: MediaTypes;

  /**
   * @generated from field: bool required = 3;
   */
  required: boolean;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 4;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<RequestBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.RequestBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestBody;

  static equals(a: RequestBody | PlainMessage<RequestBody> | undefined, b: RequestBody | PlainMessage<RequestBody> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.RequestBodyOrReference
 */
export declare class RequestBodyOrReference extends Message<RequestBodyOrReference> {
  /**
   * @generated from oneof openapi.v3.RequestBodyOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.RequestBody request_body = 1;
     */
    value: RequestBody;
    case: "requestBody";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RequestBodyOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.RequestBodyOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestBodyOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestBodyOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestBodyOrReference;

  static equals(a: RequestBodyOrReference | PlainMessage<RequestBodyOrReference> | undefined, b: RequestBodyOrReference | PlainMessage<RequestBodyOrReference> | undefined): boolean;
}

/**
 * Describes a single response from an API Operation, including design-time, static  `links` to operations based on the response.
 *
 * @generated from message openapi.v3.Response
 */
export declare class Response extends Message<Response> {
  /**
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.HeadersOrReferences headers = 2;
   */
  headers?: HeadersOrReferences;

  /**
   * @generated from field: openapi.v3.MediaTypes content = 3;
   */
  content?: MediaTypes;

  /**
   * @generated from field: openapi.v3.LinksOrReferences links = 4;
   */
  links?: LinksOrReferences;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 5;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Response>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Response";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response;

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ResponseOrReference
 */
export declare class ResponseOrReference extends Message<ResponseOrReference> {
  /**
   * @generated from oneof openapi.v3.ResponseOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Response response = 1;
     */
    value: Response;
    case: "response";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ResponseOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ResponseOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseOrReference;

  static equals(a: ResponseOrReference | PlainMessage<ResponseOrReference> | undefined, b: ResponseOrReference | PlainMessage<ResponseOrReference> | undefined): boolean;
}

/**
 * A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 *
 * @generated from message openapi.v3.Responses
 */
export declare class Responses extends Message<Responses> {
  /**
   * @generated from field: openapi.v3.ResponseOrReference default = 1;
   */
  default?: ResponseOrReference;

  /**
   * @generated from field: repeated openapi.v3.NamedResponseOrReference response_or_reference = 2;
   */
  responseOrReference: NamedResponseOrReference[];

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 3;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Responses>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Responses";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Responses;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Responses;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Responses;

  static equals(a: Responses | PlainMessage<Responses> | undefined, b: Responses | PlainMessage<Responses> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ResponsesOrReferences
 */
export declare class ResponsesOrReferences extends Message<ResponsesOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedResponseOrReference additional_properties = 1;
   */
  additionalProperties: NamedResponseOrReference[];

  constructor(data?: PartialMessage<ResponsesOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ResponsesOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponsesOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponsesOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponsesOrReferences;

  static equals(a: ResponsesOrReferences | PlainMessage<ResponsesOrReferences> | undefined, b: ResponsesOrReferences | PlainMessage<ResponsesOrReferences> | undefined): boolean;
}

/**
 * The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.  For more information about the properties, see JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema.
 *
 * @generated from message openapi.v3.Schema
 */
export declare class Schema extends Message<Schema> {
  /**
   * @generated from field: bool nullable = 1;
   */
  nullable: boolean;

  /**
   * @generated from field: openapi.v3.Discriminator discriminator = 2;
   */
  discriminator?: Discriminator;

  /**
   * @generated from field: bool read_only = 3;
   */
  readOnly: boolean;

  /**
   * @generated from field: bool write_only = 4;
   */
  writeOnly: boolean;

  /**
   * @generated from field: openapi.v3.Xml xml = 5;
   */
  xml?: Xml;

  /**
   * @generated from field: openapi.v3.ExternalDocs external_docs = 6;
   */
  externalDocs?: ExternalDocs;

  /**
   * @generated from field: openapi.v3.Any example = 7;
   */
  example?: Any;

  /**
   * @generated from field: bool deprecated = 8;
   */
  deprecated: boolean;

  /**
   * @generated from field: string title = 9;
   */
  title: string;

  /**
   * @generated from field: double multiple_of = 10;
   */
  multipleOf: number;

  /**
   * @generated from field: double maximum = 11;
   */
  maximum: number;

  /**
   * @generated from field: bool exclusive_maximum = 12;
   */
  exclusiveMaximum: boolean;

  /**
   * @generated from field: double minimum = 13;
   */
  minimum: number;

  /**
   * @generated from field: bool exclusive_minimum = 14;
   */
  exclusiveMinimum: boolean;

  /**
   * @generated from field: int64 max_length = 15;
   */
  maxLength: bigint;

  /**
   * @generated from field: int64 min_length = 16;
   */
  minLength: bigint;

  /**
   * @generated from field: string pattern = 17;
   */
  pattern: string;

  /**
   * @generated from field: int64 max_items = 18;
   */
  maxItems: bigint;

  /**
   * @generated from field: int64 min_items = 19;
   */
  minItems: bigint;

  /**
   * @generated from field: bool unique_items = 20;
   */
  uniqueItems: boolean;

  /**
   * @generated from field: int64 max_properties = 21;
   */
  maxProperties: bigint;

  /**
   * @generated from field: int64 min_properties = 22;
   */
  minProperties: bigint;

  /**
   * @generated from field: repeated string required = 23;
   */
  required: string[];

  /**
   * @generated from field: repeated openapi.v3.Any enum = 24;
   */
  enum: Any[];

  /**
   * @generated from field: string type = 25;
   */
  type: string;

  /**
   * @generated from field: repeated openapi.v3.SchemaOrReference all_of = 26;
   */
  allOf: SchemaOrReference[];

  /**
   * @generated from field: repeated openapi.v3.SchemaOrReference one_of = 27;
   */
  oneOf: SchemaOrReference[];

  /**
   * @generated from field: repeated openapi.v3.SchemaOrReference any_of = 28;
   */
  anyOf: SchemaOrReference[];

  /**
   * @generated from field: openapi.v3.Schema not = 29;
   */
  not?: Schema;

  /**
   * @generated from field: openapi.v3.ItemsItem items = 30;
   */
  items?: ItemsItem;

  /**
   * @generated from field: openapi.v3.Properties properties = 31;
   */
  properties?: Properties;

  /**
   * @generated from field: openapi.v3.AdditionalPropertiesItem additional_properties = 32;
   */
  additionalProperties?: AdditionalPropertiesItem;

  /**
   * @generated from field: openapi.v3.DefaultType default = 33;
   */
  default?: DefaultType;

  /**
   * @generated from field: string description = 34;
   */
  description: string;

  /**
   * @generated from field: string format = 35;
   */
  format: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 36;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Schema>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Schema";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema;

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.SchemaOrReference
 */
export declare class SchemaOrReference extends Message<SchemaOrReference> {
  /**
   * @generated from oneof openapi.v3.SchemaOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.Schema schema = 1;
     */
    value: Schema;
    case: "schema";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SchemaOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SchemaOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaOrReference;

  static equals(a: SchemaOrReference | PlainMessage<SchemaOrReference> | undefined, b: SchemaOrReference | PlainMessage<SchemaOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.SchemasOrReferences
 */
export declare class SchemasOrReferences extends Message<SchemasOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedSchemaOrReference additional_properties = 1;
   */
  additionalProperties: NamedSchemaOrReference[];

  constructor(data?: PartialMessage<SchemasOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SchemasOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemasOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemasOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemasOrReferences;

  static equals(a: SchemasOrReferences | PlainMessage<SchemasOrReferences> | undefined, b: SchemasOrReferences | PlainMessage<SchemasOrReferences> | undefined): boolean;
}

/**
 * Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.
 *
 * @generated from message openapi.v3.SecurityRequirement
 */
export declare class SecurityRequirement extends Message<SecurityRequirement> {
  /**
   * @generated from field: repeated openapi.v3.NamedStringArray additional_properties = 1;
   */
  additionalProperties: NamedStringArray[];

  constructor(data?: PartialMessage<SecurityRequirement>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SecurityRequirement";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurityRequirement;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurityRequirement;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurityRequirement;

  static equals(a: SecurityRequirement | PlainMessage<SecurityRequirement> | undefined, b: SecurityRequirement | PlainMessage<SecurityRequirement> | undefined): boolean;
}

/**
 * Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, application and access code) as defined in RFC6749, and OpenID Connect.   Please note that currently (2019) the implicit flow is about to be deprecated OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.
 *
 * @generated from message openapi.v3.SecurityScheme
 */
export declare class SecurityScheme extends Message<SecurityScheme> {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string in = 4;
   */
  in: string;

  /**
   * @generated from field: string scheme = 5;
   */
  scheme: string;

  /**
   * @generated from field: string bearer_format = 6;
   */
  bearerFormat: string;

  /**
   * @generated from field: openapi.v3.OauthFlows flows = 7;
   */
  flows?: OauthFlows;

  /**
   * @generated from field: string open_id_connect_url = 8;
   */
  openIdConnectUrl: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 9;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<SecurityScheme>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SecurityScheme";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurityScheme;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurityScheme;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurityScheme;

  static equals(a: SecurityScheme | PlainMessage<SecurityScheme> | undefined, b: SecurityScheme | PlainMessage<SecurityScheme> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.SecuritySchemeOrReference
 */
export declare class SecuritySchemeOrReference extends Message<SecuritySchemeOrReference> {
  /**
   * @generated from oneof openapi.v3.SecuritySchemeOrReference.oneof
   */
  oneof: {
    /**
     * @generated from field: openapi.v3.SecurityScheme security_scheme = 1;
     */
    value: SecurityScheme;
    case: "securityScheme";
  } | {
    /**
     * @generated from field: openapi.v3.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SecuritySchemeOrReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SecuritySchemeOrReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecuritySchemeOrReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecuritySchemeOrReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecuritySchemeOrReference;

  static equals(a: SecuritySchemeOrReference | PlainMessage<SecuritySchemeOrReference> | undefined, b: SecuritySchemeOrReference | PlainMessage<SecuritySchemeOrReference> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.SecuritySchemesOrReferences
 */
export declare class SecuritySchemesOrReferences extends Message<SecuritySchemesOrReferences> {
  /**
   * @generated from field: repeated openapi.v3.NamedSecuritySchemeOrReference additional_properties = 1;
   */
  additionalProperties: NamedSecuritySchemeOrReference[];

  constructor(data?: PartialMessage<SecuritySchemesOrReferences>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SecuritySchemesOrReferences";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecuritySchemesOrReferences;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecuritySchemesOrReferences;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecuritySchemesOrReferences;

  static equals(a: SecuritySchemesOrReferences | PlainMessage<SecuritySchemesOrReferences> | undefined, b: SecuritySchemesOrReferences | PlainMessage<SecuritySchemesOrReferences> | undefined): boolean;
}

/**
 * An object representing a Server.
 *
 * @generated from message openapi.v3.Server
 */
export declare class Server extends Message<Server> {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.ServerVariables variables = 3;
   */
  variables?: ServerVariables;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 4;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Server>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Server";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Server;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Server;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Server;

  static equals(a: Server | PlainMessage<Server> | undefined, b: Server | PlainMessage<Server> | undefined): boolean;
}

/**
 * An object representing a Server Variable for server URL template substitution.
 *
 * @generated from message openapi.v3.ServerVariable
 */
export declare class ServerVariable extends Message<ServerVariable> {
  /**
   * @generated from field: repeated string enum = 1;
   */
  enum: string[];

  /**
   * @generated from field: string default = 2;
   */
  default: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 4;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<ServerVariable>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ServerVariable";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerVariable;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerVariable;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerVariable;

  static equals(a: ServerVariable | PlainMessage<ServerVariable> | undefined, b: ServerVariable | PlainMessage<ServerVariable> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.ServerVariables
 */
export declare class ServerVariables extends Message<ServerVariables> {
  /**
   * @generated from field: repeated openapi.v3.NamedServerVariable additional_properties = 1;
   */
  additionalProperties: NamedServerVariable[];

  constructor(data?: PartialMessage<ServerVariables>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.ServerVariables";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerVariables;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerVariables;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerVariables;

  static equals(a: ServerVariables | PlainMessage<ServerVariables> | undefined, b: ServerVariables | PlainMessage<ServerVariables> | undefined): boolean;
}

/**
 * Any property starting with x- is valid.
 *
 * @generated from message openapi.v3.SpecificationExtension
 */
export declare class SpecificationExtension extends Message<SpecificationExtension> {
  /**
   * @generated from oneof openapi.v3.SpecificationExtension.oneof
   */
  oneof: {
    /**
     * @generated from field: double number = 1;
     */
    value: number;
    case: "number";
  } | {
    /**
     * @generated from field: bool boolean = 2;
     */
    value: boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: string string = 3;
     */
    value: string;
    case: "string";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SpecificationExtension>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.SpecificationExtension";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecificationExtension;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecificationExtension;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecificationExtension;

  static equals(a: SpecificationExtension | PlainMessage<SpecificationExtension> | undefined, b: SpecificationExtension | PlainMessage<SpecificationExtension> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.StringArray
 */
export declare class StringArray extends Message<StringArray> {
  /**
   * @generated from field: repeated string value = 1;
   */
  value: string[];

  constructor(data?: PartialMessage<StringArray>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.StringArray";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringArray;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringArray;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringArray;

  static equals(a: StringArray | PlainMessage<StringArray> | undefined, b: StringArray | PlainMessage<StringArray> | undefined): boolean;
}

/**
 * @generated from message openapi.v3.Strings
 */
export declare class Strings extends Message<Strings> {
  /**
   * @generated from field: repeated openapi.v3.NamedString additional_properties = 1;
   */
  additionalProperties: NamedString[];

  constructor(data?: PartialMessage<Strings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Strings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Strings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Strings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Strings;

  static equals(a: Strings | PlainMessage<Strings> | undefined, b: Strings | PlainMessage<Strings> | undefined): boolean;
}

/**
 * Adds metadata to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.
 *
 * @generated from message openapi.v3.Tag
 */
export declare class Tag extends Message<Tag> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: openapi.v3.ExternalDocs external_docs = 3;
   */
  externalDocs?: ExternalDocs;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 4;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Tag>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Tag";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag;

  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean;
}

/**
 * A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 *
 * @generated from message openapi.v3.Xml
 */
export declare class Xml extends Message<Xml> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * @generated from field: string prefix = 3;
   */
  prefix: string;

  /**
   * @generated from field: bool attribute = 4;
   */
  attribute: boolean;

  /**
   * @generated from field: bool wrapped = 5;
   */
  wrapped: boolean;

  /**
   * @generated from field: repeated openapi.v3.NamedAny specification_extension = 6;
   */
  specificationExtension: NamedAny[];

  constructor(data?: PartialMessage<Xml>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "openapi.v3.Xml";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Xml;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Xml;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Xml;

  static equals(a: Xml | PlainMessage<Xml> | undefined, b: Xml | PlainMessage<Xml> | undefined): boolean;
}

